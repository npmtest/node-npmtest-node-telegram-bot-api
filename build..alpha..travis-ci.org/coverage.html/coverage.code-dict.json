{"/home/travis/build/npmtest/node-npmtest-node-telegram-bot-api/test.js":"/* istanbul instrument in package npmtest_node_telegram_bot_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-telegram-bot-api/lib.npmtest_node_telegram_bot_api.js":"/* istanbul instrument in package npmtest_node_telegram_bot_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_telegram_bot_api = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_telegram_bot_api = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-telegram-bot-api/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-telegram-bot-api && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_telegram_bot_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_telegram_bot_api\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_telegram_bot_api.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_telegram_bot_api.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_telegram_bot_api.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_telegram_bot_api.__dirname + '/lib.npmtest_node_telegram_bot_api.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-telegram-bot-api/node_modules/node-telegram-bot-api/index.js":"/**\n * If running on Nodejs 4.x and below, we load the transpiled code.\n * Otherwise, we use the ES6 code.\n * We are deprecating support for Node.js v4.x and below.\n */\nconst majorVersion = parseInt(process.versions.node.split('.')[0], 10);\nif (majorVersion <= 4) {\n  const deprecate = require('depd')('node-telegram-bot-api');\n  deprecate('Node.js v4.x and below will no longer be supported in the future');\n  module.exports = require('./lib/telegram');\n} else {\n  module.exports = require('./src/telegram');\n}\n","/home/travis/build/npmtest/node-npmtest-node-telegram-bot-api/node_modules/node-telegram-bot-api/src/telegram.js":"// shims\nrequire('array.prototype.findindex').shim(); // for Node.js v0.x\n\nconst errors = require('./errors');\nconst TelegramBotWebHook = require('./telegramWebHook');\nconst TelegramBotPolling = require('./telegramPolling');\nconst debug = require('debug')('node-telegram-bot-api');\nconst EventEmitter = require('eventemitter3');\nconst fileType = require('file-type');\nconst Promise = require('bluebird');\nconst request = require('request-promise');\nconst streamedRequest = require('request');\nconst qs = require('querystring');\nconst stream = require('stream');\nconst mime = require('mime');\nconst path = require('path');\nconst URL = require('url');\nconst fs = require('fs');\nconst pump = require('pump');\nconst deprecate = require('depd')('node-telegram-bot-api');\n\nconst _messageTypes = [\n  'text', 'audio', 'document', 'photo', 'sticker', 'video', 'voice', 'contact',\n  'location', 'new_chat_participant', 'left_chat_participant', 'new_chat_title',\n  'new_chat_photo', 'delete_chat_photo', 'group_chat_created'\n];\n\n// enable cancellation\nPromise.config({\n  cancellation: true,\n});\n\nclass TelegramBot extends EventEmitter {\n\n  static get errors() {\n    return errors;\n  }\n\n  static get messageTypes() {\n    return _messageTypes;\n  }\n\n  /**\n   * Both request method to obtain messages are implemented. To use standard polling, set `polling: true`\n   * on `options`. Notice that [webHook](https://core.telegram.org/bots/api#setwebhook) will need a SSL certificate.\n   * Emits `message` when a message arrives.\n   *\n   * @class TelegramBot\n   * @constructor\n   * @param {String} token Bot Token\n   * @param {Object} [options]\n   * @param {Boolean|Object} [options.polling=false] Set true to enable polling or set options.\n   *  If a WebHook has been set, it will be deleted automatically.\n   * @param {String|Number} [options.polling.timeout=10] *Deprecated. Use `options.polling.params` instead*.\n   *  Timeout in seconds for long polling.\n   * @param {String|Number} [options.polling.interval=300] Interval between requests in miliseconds\n   * @param {Boolean} [options.polling.autoStart=true] Start polling immediately\n   * @param {Object} [options.polling.params] Parameters to be used in polling API requests.\n   *  See https://core.telegram.org/bots/api#getupdates for more information.\n   * @param  {Number} [options.polling.params.timeout=10] Timeout in seconds for long polling.\n   * @param {Boolean|Object} [options.webHook=false] Set true to enable WebHook or set options\n   * @param {String} [options.webHook.host=0.0.0.0] Host to bind to\n   * @param {Number} [options.webHook.port=8443] Port to bind to\n   * @param {String} [options.webHook.key] Path to file with PEM private key for webHook server.\n   *  The file is read **synchronously**!\n   * @param {String} [options.webHook.cert] Path to file with PEM certificate (public) for webHook server.\n   *  The file is read **synchronously**!\n   * @param {String} [options.webHook.pfx] Path to file with PFX private key and certificate chain for webHook server.\n   *  The file is read **synchronously**!\n   * @param {Boolean} [options.webHook.autoOpen=true] Open webHook immediately\n   * @param {Object} [options.webHook.https] Options to be passed to `https.createServer()`.\n   *  Note that `options.webHook.key`, `options.webHook.cert` and `options.webHook.pfx`, if provided, will be\n   *  used to override `key`, `cert` and `pfx` in this object, respectively.\n   *  See https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener for more information.\n   * @param {String} [options.webHook.healthEndpoint=/healthz] An endpoint for health checks that always responds with 200 OK\n   * @param {Boolean} [options.onlyFirstMatch=false] Set to true to stop after first match. Otherwise, all regexps are executed\n   * @param {Object} [options.request] Options which will be added for all requests to telegram api.\n   *  See https://github.com/request/request#requestoptions-callback for more information.\n   * @param {String} [options.baseApiUrl=https://api.telegram.org] API Base URl; useful for proxying and testing\n   * @param {Boolean} [options.filepath=true] Allow passing file-paths as arguments when sending files,\n   *  such as photos using `TelegramBot#sendPhoto()`. See [usage information][usage-sending-files-performance]\n   *  for more information on this option and its consequences.\n   * @see https://core.telegram.org/bots/api\n   */\n  constructor(token, options = {}) {\n    super();\n    this.token = token;\n    this.options = options;\n    this.options.polling = (typeof options.polling === 'undefined') ? false : options.polling;\n    this.options.webHook = (typeof options.webHook === 'undefined') ? false : options.webHook;\n    this.options.baseApiUrl = options.baseApiUrl || 'https://api.telegram.org';\n    this.options.filepath = (typeof options.filepath === 'undefined') ? true : options.filepath;\n    this._textRegexpCallbacks = [];\n    this._replyListenerId = 0;\n    this._replyListeners = [];\n    this._polling = null;\n    this._webHook = null;\n\n    if (options.polling) {\n      const autoStart = options.polling.autoStart;\n      if (typeof autoStart === 'undefined' || autoStart === true) {\n        this.startPolling();\n      }\n    }\n\n    if (options.webHook) {\n      const autoOpen = options.webHook.autoOpen;\n      if (typeof autoOpen === 'undefined' || autoOpen === true) {\n        this.openWebHook();\n      }\n    }\n  }\n\n  /**\n   * Generates url with bot token and provided path/method you want to be got/executed by bot\n   * @param  {String} path\n   * @return {String} url\n   * @private\n   * @see https://core.telegram.org/bots/api#making-requests\n   */\n  _buildURL(_path) {\n    return `${this.options.baseApiUrl}/bot${this.token}/${_path}`;\n  }\n\n  /**\n   * Fix 'reply_markup' parameter by making it JSON-serialized, as\n   * required by the Telegram Bot API\n   * @param {Object} obj Object; either 'form' or 'qs'\n   * @private\n   * @see https://core.telegram.org/bots/api#sendmessage\n   */\n  _fixReplyMarkup(obj) {\n    const replyMarkup = obj.reply_markup;\n    if (replyMarkup && typeof replyMarkup !== 'string') {\n      obj.reply_markup = JSON.stringify(replyMarkup);\n    }\n  }\n\n  /**\n   * Make request against the API\n   * @param  {String} _path API endpoint\n   * @param  {Object} [options]\n   * @private\n   * @return {Promise}\n   */\n  _request(_path, options = {}) {\n    if (!this.token) {\n      return Promise.reject(new errors.FatalError('Telegram Bot Token not provided!'));\n    }\n\n    if (this.options.request) {\n      Object.assign(options, this.options.request);\n    }\n\n    if (options.form) {\n      this._fixReplyMarkup(options.form);\n    }\n    if (options.qs) {\n      this._fixReplyMarkup(options.qs);\n    }\n\n    options.method = 'POST';\n    options.url = this._buildURL(_path);\n    options.simple = false;\n    options.resolveWithFullResponse = true;\n    options.forever = true;\n    debug('HTTP request: %j', options);\n    return request(options)\n      .then(resp => {\n        let data;\n        try {\n          data = resp.body = JSON.parse(resp.body);\n        } catch (err) {\n          throw new errors.ParseError(`Error parsing Telegram response: ${resp.body}`, resp);\n        }\n\n        if (data.ok) {\n          return data.result;\n        }\n\n        throw new errors.TelegramError(`${data.error_code} ${data.description}`, resp);\n      }).catch(error => {\n        // TODO: why can't we do `error instanceof errors.BaseError`?\n        if (error.response) throw error;\n        throw new errors.FatalError(error);\n      });\n  }\n\n  /**\n   * Format data to be uploaded; handles file paths, streams and buffers\n   * @param  {String} type\n   * @param  {String|stream.Stream|Buffer} data\n   * @return {Array} formatted\n   * @return {Object} formatted[0] formData\n   * @return {String} formatted[1] fileId\n   * @throws Error if Buffer file type is not supported.\n   * @see https://npmjs.com/package/file-type\n   * @private\n   */\n  _formatSendData(type, data) {\n    let formData;\n    let fileName;\n    let fileId;\n    if (data instanceof stream.Stream) {\n      // Will be 'null' if could not be parsed. Default to 'filename'.\n      // For example, 'data.path' === '/?id=123' from 'request(\"https://example.com/?id=123\")'\n      fileName = URL.parse(path.basename(data.path.toString())).pathname || 'filename';\n      formData = {};\n      formData[type] = {\n        value: data,\n        options: {\n          filename: qs.unescape(fileName),\n          contentType: mime.lookup(fileName)\n        }\n      };\n    } else if (Buffer.isBuffer(data)) {\n      const filetype = fileType(data);\n      if (!filetype) {\n        throw new errors.FatalError('Unsupported Buffer file type');\n      }\n      formData = {};\n      formData[type] = {\n        value: data,\n        options: {\n          filename: `data.${filetype.ext}`,\n          contentType: filetype.mime\n        }\n      };\n    } else if (!this.options.filepath) {\n      /**\n       * When the constructor option 'filepath' is set to\n       * 'false', we do not support passing file-paths.\n       */\n      fileId = data;\n    } else if (fs.existsSync(data)) {\n      fileName = path.basename(data);\n      formData = {};\n      formData[type] = {\n        value: fs.createReadStream(data),\n        options: {\n          filename: fileName,\n          contentType: mime.lookup(fileName)\n        }\n      };\n    } else {\n      fileId = data;\n    }\n    return [formData, fileId];\n  }\n\n  /**\n   * Start polling.\n   * Rejects returned promise if a WebHook is being used by this instance.\n   * @param  {Object} [options]\n   * @param  {Boolean} [options.restart=true] Consecutive calls to this method causes polling to be restarted\n   * @return {Promise}\n   */\n  startPolling(options = {}) {\n    if (this.hasOpenWebHook()) {\n      return Promise.reject(new errors.FatalError('Polling and WebHook are mutually exclusive'));\n    }\n    options.restart = typeof options.restart === 'undefined' ? true : options.restart;\n    if (!this._polling) {\n      this._polling = new TelegramBotPolling(this);\n    }\n    return this._polling.start(options);\n  }\n\n  /**\n   * Alias of `TelegramBot#startPolling()`. This is **deprecated**.\n   * @param  {Object} [options]\n   * @return {Promise}\n   * @deprecated\n   */\n  initPolling() {\n    deprecate('TelegramBot#initPolling() is deprecated');\n    return this.startPolling();\n  }\n\n  /**\n   * Stops polling after the last polling request resolves.\n   * Multiple invocations do nothing if polling is already stopped.\n   * Returning the promise of the last polling request is **deprecated**.\n   * @return {Promise}\n   */\n  stopPolling() {\n    if (!this._polling) {\n      return Promise.resolve();\n    }\n    return this._polling.stop();\n  }\n\n  /**\n   * Return true if polling. Otherwise, false.\n   * @return {Boolean}\n   */\n  isPolling() {\n    return this._polling ? this._polling.isPolling() : false;\n  }\n\n  /**\n   * Open webhook.\n   * Multiple invocations do nothing if webhook is already open.\n   * Rejects returned promise if Polling is being used by this instance.\n   * @return {Promise}\n   */\n  openWebHook() {\n    if (this.isPolling()) {\n      return Promise.reject(new errors.FatalError('WebHook and Polling are mutually exclusive'));\n    }\n    if (!this._webHook) {\n      this._webHook = new TelegramBotWebHook(this);\n    }\n    return this._webHook.open();\n  }\n\n  /**\n   * Close webhook after closing all current connections.\n   * Multiple invocations do nothing if webhook is already closed.\n   * @return {Promise} promise\n   */\n  closeWebHook() {\n    if (!this._webHook) {\n      return Promise.resolve();\n    }\n    return this._webHook.close();\n  }\n\n  /**\n   * Return true if using webhook and it is open i.e. accepts connections.\n   * Otherwise, false.\n   * @return {Boolean}\n   */\n  hasOpenWebHook() {\n    return this._webHook ? this._webHook.isOpen() : false;\n  }\n\n  /**\n   * Returns basic information about the bot in form of a `User` object.\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#getme\n   */\n  getMe() {\n    const _path = 'getMe';\n    return this._request(_path);\n  }\n\n  /**\n   * Specify an url to receive incoming updates via an outgoing webHook.\n   * This method has an [older, compatible signature][setWebHook-v0.25.0]\n   * that is being deprecated.\n   *\n   * @param  {String} url URL where Telegram will make HTTP Post. Leave empty to\n   * delete webHook.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {String|stream.Stream} [options.certificate] PEM certificate key (public).\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#setwebhook\n   */\n  setWebHook(url, options = {}) {\n    /* The older method signature was setWebHook(url, cert).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library */\n    let cert;\n    // Note: 'options' could be an object, if a stream was provided (in place of 'cert')\n    if (typeof options !== 'object' || options instanceof stream.Stream) {\n      deprecate('The method signature setWebHook(url, cert) has been deprecated since v0.25.0');\n      cert = options;\n      options = {}; // eslint-disable-line no-param-reassign\n    } else {\n      cert = options.certificate;\n    }\n\n    const opts = {\n      qs: options,\n    };\n    opts.qs.url = url;\n\n    if (cert) {\n      try {\n        const sendData = this._formatSendData('certificate', cert);\n        opts.formData = sendData[0];\n        opts.qs.certificate = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n    }\n\n    return this._request('setWebHook', opts);\n  }\n\n  /**\n   * Use this method to remove webhook integration if you decide to\n   * switch back to getUpdates. Returns True on success.\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#deletewebhook\n   */\n  deleteWebHook() {\n    return this._request('deleteWebhook');\n  }\n\n  /**\n   * Use this method to get current webhook status.\n   * On success, returns a [WebhookInfo](https://core.telegram.org/bots/api#webhookinfo) object.\n   * If the bot is using getUpdates, will return an object with the\n   * url field empty.\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#getwebhookinfo\n   */\n  getWebHookInfo() {\n    return this._request('getWebhookInfo');\n  }\n\n  /**\n   * Use this method to receive incoming updates using long polling.\n   * This method has an [older, compatible signature][getUpdates-v0.25.0]\n   * that is being deprecated.\n   *\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#getupdates\n   */\n  getUpdates(form = {}) {\n    /* The older method signature was getUpdates(timeout, limit, offset).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library */\n    if (typeof form !== 'object') {\n      /* eslint-disable no-param-reassign, prefer-rest-params */\n      deprecate('The method signature getUpdates(timeout, limit, offset) has been deprecated since v0.25.0');\n      form = {\n        timeout: arguments[0],\n        limit: arguments[1],\n        offset: arguments[2],\n      };\n      /* eslint-enable no-param-reassign, prefer-rest-params */\n    }\n\n    return this._request('getUpdates', { form });\n  }\n\n  /**\n   * Process an update; emitting the proper events and executing regexp\n   * callbacks. This method is useful should you be using a different\n   * way to fetch updates, other than those provided by TelegramBot.\n   * @param  {Object} update\n   * @see https://core.telegram.org/bots/api#update\n   */\n  processUpdate(update) {\n    debug('Process Update %j', update);\n    const message = update.message;\n    const editedMessage = update.edited_message;\n    const channelPost = update.channel_post;\n    const editedChannelPost = update.edited_channel_post;\n    const inlineQuery = update.inline_query;\n    const chosenInlineResult = update.chosen_inline_result;\n    const callbackQuery = update.callback_query;\n\n    if (message) {\n      debug('Process Update message %j', message);\n      this.emit('message', message);\n      const processMessageType = messageType => {\n        if (message[messageType]) {\n          debug('Emitting %s: %j', messageType, message);\n          this.emit(messageType, message);\n        }\n      };\n      TelegramBot.messageTypes.forEach(processMessageType);\n      if (message.text) {\n        debug('Text message');\n        this._textRegexpCallbacks.some(reg => {\n          debug('Matching %s with %s', message.text, reg.regexp);\n          const result = reg.regexp.exec(message.text);\n          if (!result) {\n            return false;\n          }\n          debug('Matches %s', reg.regexp);\n          reg.callback(message, result);\n          // returning truthy value exits .some\n          return this.options.onlyFirstMatch;\n        });\n      }\n      if (message.reply_to_message) {\n        // Only callbacks waiting for this message\n        this._replyListeners.forEach(reply => {\n          // Message from the same chat\n          if (reply.chatId === message.chat.id) {\n            // Responding to that message\n            if (reply.messageId === message.reply_to_message.message_id) {\n              // Resolve the promise\n              reply.callback(message);\n            }\n          }\n        });\n      }\n    } else if (editedMessage) {\n      debug('Process Update edited_message %j', editedMessage);\n      this.emit('edited_message', editedMessage);\n      if (editedMessage.text) {\n        this.emit('edited_message_text', editedMessage);\n      }\n      if (editedMessage.caption) {\n        this.emit('edited_message_caption', editedMessage);\n      }\n    } else if (channelPost) {\n      debug('Process Update channel_post %j', channelPost);\n      this.emit('channel_post', channelPost);\n    } else if (editedChannelPost) {\n      debug('Process Update edited_channel_post %j', editedChannelPost);\n      this.emit('edited_channel_post', editedChannelPost);\n      if (editedChannelPost.text) {\n        this.emit('edited_channel_post_text', editedChannelPost);\n      }\n      if (editedChannelPost.caption) {\n        this.emit('edited_channel_post_caption', editedChannelPost);\n      }\n    } else if (inlineQuery) {\n      debug('Process Update inline_query %j', inlineQuery);\n      this.emit('inline_query', inlineQuery);\n    } else if (chosenInlineResult) {\n      debug('Process Update chosen_inline_result %j', chosenInlineResult);\n      this.emit('chosen_inline_result', chosenInlineResult);\n    } else if (callbackQuery) {\n      debug('Process Update callback_query %j', callbackQuery);\n      this.emit('callback_query', callbackQuery);\n    }\n  }\n\n  /**\n   * Send text message.\n   * @param  {Number|String} chatId Unique identifier for the message recipient\n   * @param  {String} text Text of the message to be sent\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#sendmessage\n   */\n  sendMessage(chatId, text, form = {}) {\n    form.chat_id = chatId;\n    form.text = text;\n    return this._request('sendMessage', { form });\n  }\n\n  /**\n   * Send answers to an inline query.\n   * @param  {String} inlineQueryId Unique identifier of the query\n   * @param  {InlineQueryResult[]} results An array of results for the inline query\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#answerinlinequery\n   */\n  answerInlineQuery(inlineQueryId, results, form = {}) {\n    form.inline_query_id = inlineQueryId;\n    form.results = JSON.stringify(results);\n    return this._request('answerInlineQuery', { form });\n  }\n\n  /**\n   * Forward messages of any kind.\n   * @param  {Number|String} chatId     Unique identifier for the message recipient\n   * @param  {Number|String} fromChatId Unique identifier for the chat where the\n   * original message was sent\n   * @param  {Number|String} messageId  Unique message identifier\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   */\n  forwardMessage(chatId, fromChatId, messageId, form = {}) {\n    form.chat_id = chatId;\n    form.from_chat_id = fromChatId;\n    form.message_id = messageId;\n    return this._request('forwardMessage', { form });\n  }\n\n  /**\n   * Send photo\n   * @param  {Number|String} chatId  Unique identifier for the message recipient\n   * @param  {String|stream.Stream|Buffer} photo A file path or a Stream. Can\n   * also be a `file_id` previously uploaded\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#sendphoto\n   */\n  sendPhoto(chatId, photo, options = {}) {\n    const opts = {\n      qs: options,\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('photo', photo);\n      opts.formData = sendData[0];\n      opts.qs.photo = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendPhoto', opts);\n  }\n\n  /**\n   * Send audio\n   * @param  {Number|String} chatId  Unique identifier for the message recipient\n   * @param  {String|stream.Stream|Buffer} audio A file path, Stream or Buffer.\n   * Can also be a `file_id` previously uploaded.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#sendaudio\n   */\n  sendAudio(chatId, audio, options = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('audio', audio);\n      opts.formData = sendData[0];\n      opts.qs.audio = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendAudio', opts);\n  }\n\n  /**\n   * Send Document\n   * @param  {Number|String} chatId  Unique identifier for the message recipient\n   * @param  {String|stream.Stream|Buffer} doc A file path, Stream or Buffer.\n   * Can also be a `file_id` previously uploaded.\n   * @param  {Object} [options] Additional Telegram query options\n   * @param  {Object} [fileOpts] Optional file related meta-data\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#sendDocument\n   */\n  sendDocument(chatId, doc, options = {}, fileOpts = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('document', doc);\n      opts.formData = sendData[0];\n      opts.qs.document = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    if (opts.formData && Object.keys(fileOpts).length) {\n      opts.formData.document.options = fileOpts;\n    }\n    return this._request('sendDocument', opts);\n  }\n\n  /**\n   * Send .webp stickers.\n   * @param  {Number|String} chatId  Unique identifier for the message recipient\n   * @param  {String|stream.Stream|Buffer} sticker A file path, Stream or Buffer.\n   * Can also be a `file_id` previously uploaded. Stickers are WebP format files.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#sendsticker\n   */\n  sendSticker(chatId, sticker, options = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('sticker', sticker);\n      opts.formData = sendData[0];\n      opts.qs.sticker = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendSticker', opts);\n  }\n\n  /**\n   * Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document).\n   * @param  {Number|String} chatId  Unique identifier for the message recipient\n   * @param  {String|stream.Stream|Buffer} video A file path or Stream.\n   * Can also be a `file_id` previously uploaded.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#sendvideo\n   */\n  sendVideo(chatId, video, options = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('video', video);\n      opts.formData = sendData[0];\n      opts.qs.video = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendVideo', opts);\n  }\n\n  /**\n   * Send voice\n   * @param  {Number|String} chatId  Unique identifier for the message recipient\n   * @param  {String|stream.Stream|Buffer} voice A file path, Stream or Buffer.\n   * Can also be a `file_id` previously uploaded.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#sendvoice\n   */\n  sendVoice(chatId, voice, options = {}) {\n    const opts = {\n      qs: options\n    };\n    opts.qs.chat_id = chatId;\n    try {\n      const sendData = this._formatSendData('voice', voice);\n      opts.formData = sendData[0];\n      opts.qs.voice = sendData[1];\n    } catch (ex) {\n      return Promise.reject(ex);\n    }\n    return this._request('sendVoice', opts);\n  }\n\n\n  /**\n   * Send chat action.\n   * `typing` for text messages,\n   * `upload_photo` for photos, `record_video` or `upload_video` for videos,\n   * `record_audio` or `upload_audio` for audio files, `upload_document` for general files,\n   * `find_location` for location data.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the message recipient\n   * @param  {String} action Type of action to broadcast.\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#sendchataction\n   */\n  sendChatAction(chatId, action) {\n    const form = {\n      action,\n      chat_id: chatId\n    };\n    return this._request('sendChatAction', { form });\n  }\n\n  /**\n   * Use this method to kick a user from a group or a supergroup.\n   * In the case of supergroups, the user will not be able to return\n   * to the group on their own using invite links, etc., unless unbanned\n   * first. The bot must be an administrator in the group for this to work.\n   * Returns True on success.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n   * @param  {String} userId  Unique identifier of the target user\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#kickchatmember\n   */\n  kickChatMember(chatId, userId) {\n    const form = {\n      chat_id: chatId,\n      user_id: userId\n    };\n    return this._request('kickChatMember', { form });\n  }\n\n  /**\n   * Use this method to unban a previously kicked user in a supergroup.\n   * The user will not return to the group automatically, but will be\n   * able to join via link, etc. The bot must be an administrator in\n   * the group for this to work. Returns True on success.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n   * @param  {String} userId  Unique identifier of the target user\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#unbanchatmember\n   */\n  unbanChatMember(chatId, userId) {\n    const form = {\n      chat_id: chatId,\n      user_id: userId\n    };\n    return this._request('unbanChatMember', { form });\n  }\n\n  /**\n   * Use this method to send answers to callback queries sent from\n   * inline keyboards. The answer will be displayed to the user as\n   * a notification at the top of the chat screen or as an alert.\n   * On success, True is returned.\n   *\n   * @param  {Number|String} callbackQueryId  Unique identifier for the query to be answered\n   * @param  {String} text  Text of the notification. If not specified, nothing will be shown to the user\n   * @param  {Boolean} showAlert  Whether to show an alert or a notification at the top of the screen\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#answercallbackquery\n   */\n  answerCallbackQuery(callbackQueryId, text, showAlert, form = {}) {\n    form.callback_query_id = callbackQueryId;\n    form.text = text;\n    form.show_alert = showAlert;\n    return this._request('answerCallbackQuery', { form });\n  }\n\n  /**\n   * Use this method to edit text messages sent by the bot or via\n   * the bot (for inline bots). On success, the edited Message is\n   * returned.\n   *\n   * Note that you must provide one of chat_id, message_id, or\n   * inline_message_id in your request.\n   *\n   * @param  {String} text  New text of the message\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#editmessagetext\n   */\n  editMessageText(text, form = {}) {\n    form.text = text;\n    return this._request('editMessageText', { form });\n  }\n\n  /**\n   * Use this method to edit captions of messages sent by the\n   * bot or via the bot (for inline bots). On success, the\n   * edited Message is returned.\n   *\n   * Note that you must provide one of chat_id, message_id, or\n   * inline_message_id in your request.\n   *\n   * @param  {String} caption  New caption of the message\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#editmessagecaption\n   */\n  editMessageCaption(caption, form = {}) {\n    form.caption = caption;\n    return this._request('editMessageCaption', { form });\n  }\n\n  /**\n   * Use this method to edit only the reply markup of messages\n   * sent by the bot or via the bot (for inline bots).\n   * On success, the edited Message is returned.\n   *\n   * Note that you must provide one of chat_id, message_id, or\n   * inline_message_id in your request.\n   *\n   * @param  {Object} replyMarkup  A JSON-serialized object for an inline keyboard.\n   * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#editmessagetext\n   */\n  editMessageReplyMarkup(replyMarkup, form = {}) {\n    form.reply_markup = replyMarkup;\n    return this._request('editMessageReplyMarkup', { form });\n  }\n\n  /**\n   * Use this method to get a list of profile pictures for a user.\n   * Returns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object.\n   * This method has an [older, compatible signature][getUserProfilePhotos-v0.25.0]\n   * that is being deprecated.\n   *\n   * @param  {Number|String} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#getuserprofilephotos\n   */\n  getUserProfilePhotos(userId, form = {}) {\n    /* The older method signature was getUserProfilePhotos(userId, offset, limit).\n     * We need to ensure backwards-compatibility while maintaining\n     * consistency of the method signatures throughout the library */\n    if (typeof form !== 'object') {\n      /* eslint-disable no-param-reassign, prefer-rest-params */\n      deprecate('The method signature getUserProfilePhotos(userId, offset, limit) has been deprecated since v0.25.0');\n      form = {\n        offset: arguments[1],\n        limit: arguments[2],\n      };\n      /* eslint-enable no-param-reassign, prefer-rest-params */\n    }\n    form.user_id = userId;\n    return this._request('getUserProfilePhotos', { form });\n  }\n\n  /**\n   * Send location.\n   * Use this method to send point on the map.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the message recipient\n   * @param  {Float} latitude Latitude of location\n   * @param  {Float} longitude Longitude of location\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#sendlocation\n   */\n  sendLocation(chatId, latitude, longitude, form = {}) {\n    form.chat_id = chatId;\n    form.latitude = latitude;\n    form.longitude = longitude;\n    return this._request('sendLocation', { form });\n  }\n\n  /**\n   * Send venue.\n   * Use this method to send information about a venue.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the message recipient\n   * @param  {Float} latitude Latitude of location\n   * @param  {Float} longitude Longitude of location\n   * @param  {String} title Name of the venue\n   * @param  {String} address Address of the venue\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#sendvenue\n   */\n  sendVenue(chatId, latitude, longitude, title, address, form = {}) {\n    form.chat_id = chatId;\n    form.latitude = latitude;\n    form.longitude = longitude;\n    form.title = title;\n    form.address = address;\n    return this._request('sendVenue', { form });\n  }\n\n  /**\n   * Send contact.\n   * Use this method to send phone contacts.\n   *\n   * @param  {Number|String} chatId  Unique identifier for the message recipient\n   * @param  {String} phoneNumber Contact's phone number\n   * @param  {String} firstName Contact's first name\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#sendcontact\n   */\n  sendContact(chatId, phoneNumber, firstName, form = {}) {\n    form.chat_id = chatId;\n    form.phone_number = phoneNumber;\n    form.first_name = firstName;\n    return this._request('sendContact', { form });\n  }\n\n\n  /**\n   * Get file.\n   * Use this method to get basic info about a file and prepare it for downloading.\n   * Attention: link will be valid for 1 hour.\n   *\n   * @param  {String} fileId  File identifier to get info about\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#getfile\n   */\n  getFile(fileId) {\n    const form = { file_id: fileId };\n    return this._request('getFile', { form });\n  }\n\n  /**\n   * Get link for file.\n   * Use this method to get link for file for subsequent use.\n   * Attention: link will be valid for 1 hour.\n   *\n   * This method is a sugar extension of the (getFile)[#getfilefileid] method,\n   * which returns just path to file on remote server (you will have to manually build full uri after that).\n   *\n   * @param  {String} fileId  File identifier to get info about\n   * @return {Promise} promise Promise which will have *fileURI* in resolve callback\n   * @see https://core.telegram.org/bots/api#getfile\n   */\n  getFileLink(fileId) {\n    return this.getFile(fileId)\n      .then(resp => `${this.options.baseApiUrl}/file/bot${this.token}/${resp.file_path}`);\n  }\n\n  /**\n   * Downloads file in the specified folder.\n   * This is just a sugar for (getFile)[#getfilefiled] method\n   *\n   * @param  {String} fileId  File identifier to get info about\n   * @param  {String} downloadDir Absolute path to the folder in which file will be saved\n   * @return {Promise} promise Promise, which will have *filePath* of downloaded file in resolve callback\n   */\n  downloadFile(fileId, downloadDir) {\n    return this\n      .getFileLink(fileId)\n      .then(fileURI => {\n        const fileName = fileURI.slice(fileURI.lastIndexOf('/') + 1);\n        // TODO: Ensure fileName doesn't contains slashes\n        const filePath = `${downloadDir}/${fileName}`;\n\n        // properly handles errors and closes all streams\n        return Promise\n          .fromCallback(next => {\n            pump(streamedRequest({ uri: fileURI }), fs.createWriteStream(filePath), next);\n          })\n          .return(filePath);\n      });\n  }\n\n  /**\n   * Register a RegExp to test against an incomming text message.\n   * @param  {RegExp}   regexp       RegExp to be executed with `exec`.\n   * @param  {Function} callback     Callback will be called with 2 parameters,\n   * the `msg` and the result of executing `regexp.exec` on message text.\n   */\n  onText(regexp, callback) {\n    this._textRegexpCallbacks.push({ regexp, callback });\n  }\n\n  /**\n   * Register a reply to wait for a message response.\n   * @param  {Number|String}   chatId       The chat id where the message cames from.\n   * @param  {Number|String}   messageId    The message id to be replied.\n   * @param  {Function} callback     Callback will be called with the reply\n   *  message.\n   * @return {Number} id                    The ID of the inserted reply listener.\n   */\n  onReplyToMessage(chatId, messageId, callback) {\n    const id = ++this._replyListenerId;\n    this._replyListeners.push({\n      id,\n      chatId,\n      messageId,\n      callback\n    });\n    return id;\n  }\n\n  /**\n   * Removes a reply that has been prev. registered for a message response.\n   * @param   {Number} replyListenerId      The ID of the reply listener.\n   * @return  {Object} deletedListener      The removed reply listener if\n   *   found. This object has `id`, `chatId`, `messageId` and `callback`\n   *   properties. If not found, returns `null`.\n   */\n  removeReplyListener(replyListenerId) {\n    const index = this._replyListeners.findIndex((replyListener) => {\n      return replyListener.id === replyListenerId;\n    });\n    if (index === -1) {\n      return null;\n    }\n    return this._replyListeners.splice(index, 1)[0];\n  }\n\n  /**\n   * Use this method to get up to date information about the chat\n   * (current name of the user for one-on-one conversations, current\n   * username of a user, group or channel, etc.).\n   * @param  {Number|String} chatId Unique identifier for the target chat or username of the target supergroup or channel\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#getchat\n   */\n  getChat(chatId) {\n    const form = {\n      chat_id: chatId\n    };\n    return this._request('getChat', { form });\n  }\n\n  /**\n   * Returns the administrators in a chat in form of an Array of `ChatMember` objects.\n   * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#getchatadministrators\n   */\n  getChatAdministrators(chatId) {\n    const form = {\n      chat_id: chatId\n    };\n    return this._request('getChatAdministrators', { form });\n  }\n\n  /**\n   * Use this method to get the number of members in a chat.\n   * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#getchatmemberscount\n   */\n  getChatMembersCount(chatId) {\n    const form = {\n      chat_id: chatId\n    };\n    return this._request('getChatMembersCount', { form });\n  }\n\n  /**\n   * Use this method to get information about a member of a chat.\n   * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n   * @param  {String} userId  Unique identifier of the target user\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#getchatmember\n   */\n  getChatMember(chatId, userId) {\n    const form = {\n      chat_id: chatId,\n      user_id: userId\n    };\n    return this._request('getChatMember', { form });\n  }\n\n  /**\n   * Leave a group, supergroup or channel.\n   * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#leavechat\n   */\n  leaveChat(chatId) {\n    const form = {\n      chat_id: chatId\n    };\n    return this._request('leaveChat', { form });\n  }\n\n  /**\n   * Use this method to send a game.\n   * @param  {Number|String} chatId Unique identifier for the message recipient\n   * @param  {String} gameShortName name of the game to be sent.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#sendgame\n   */\n  sendGame(chatId, gameShortName, form = {}) {\n    form.chat_id = chatId;\n    form.game_short_name = gameShortName;\n    return this._request('sendGame', { form });\n  }\n\n  /**\n   * Use this method to set the score of the specified user in a game.\n   * @param  {String} userId  Unique identifier of the target user\n   * @param  {Number} score New score value.\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#setgamescore\n   */\n  setGameScore(userId, score, form = {}) {\n    form.user_id = userId;\n    form.score = score;\n    return this._request('setGameScore', { form });\n  }\n\n  /**\n   * Use this method to get data for high score table.\n   * @param  {String} userId  Unique identifier of the target user\n   * @param  {Object} [options] Additional Telegram query options\n   * @return {Promise}\n   * @see https://core.telegram.org/bots/api#getgamehighscores\n   */\n  getGameHighScores(userId, form = {}) {\n    form.user_id = userId;\n    return this._request('getGameHighScores', { form });\n  }\n}\n\nmodule.exports = TelegramBot;\n","/home/travis/build/npmtest/node-npmtest-node-telegram-bot-api/node_modules/node-telegram-bot-api/src/errors.js":"exports.BaseError = class BaseError extends Error {\n  /**\n   * @class BaseError\n   * @constructor\n   * @private\n   * @param  {String} code Error code\n   * @param  {String} message Error message\n   */\n  constructor(code, message) {\n    super(`${code}: ${message}`);\n    this.code = code;\n  }\n};\n\n\nexports.FatalError = class FatalError extends exports.BaseError {\n  /**\n   * Fatal Error. Error code is `\"EFATAL\"`.\n   * @class FatalError\n   * @constructor\n   * @param  {String|Error} data Error object or message\n   */\n  constructor(data) {\n    const error = (typeof data === 'string') ? null : data;\n    const message = error ? error.message : data;\n    super('EFATAL', message);\n    if (error) this.stack = error.stack;\n  }\n};\n\n\nexports.ParseError = class ParseError extends exports.BaseError {\n  /**\n   * Error during parsing. Error code is `\"EPARSE\"`.\n   * @class ParseError\n   * @constructor\n   * @param  {String} message Error message\n   * @param  {http.IncomingMessage} response Server response\n   */\n  constructor(message, response) {\n    super('EPARSE', message);\n    this.response = response;\n  }\n};\n\n\nexports.TelegramError = class TelegramError extends exports.BaseError {\n  /**\n   * Error returned from Telegram. Error code is `\"ETELEGRAM\"`.\n   * @class TelegramError\n   * @constructor\n   * @param  {String} message Error message\n   * @param  {http.IncomingMessage} response Server response\n   */\n  constructor(message, response) {\n    super('ETELEGRAM', message);\n    this.response = response;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-node-telegram-bot-api/node_modules/node-telegram-bot-api/src/telegramWebHook.js":"const errors = require('./errors');\nconst debug = require('debug')('node-telegram-bot-api');\nconst https = require('https');\nconst http = require('http');\nconst fs = require('fs');\nconst bl = require('bl');\nconst Promise = require('bluebird');\n\n\nclass TelegramBotWebHook {\n  /**\n   * Sets up a webhook to receive updates\n   * @param  {TelegramBot} bot\n   * @see https://core.telegram.org/bots/api#getting-updates\n   */\n  constructor(bot) {\n    this.bot = bot;\n    this.options = (typeof bot.options.webHook === 'boolean') ? {} : bot.options.webHook;\n    this.options.host = this.options.host || '0.0.0.0';\n    this.options.port = this.options.port || 8443;\n    this.options.https = this.options.https || {};\n    this.options.healthEndpoint = this.options.healthEndpoint || '/healthz';\n    this._healthRegex = new RegExp(this.options.healthEndpoint);\n    this._webServer = null;\n    this._open = false;\n    this._requestListener = this._requestListener.bind(this);\n    this._parseBody = this._parseBody.bind(this);\n\n    if (this.options.key && this.options.cert) {\n      debug('HTTPS WebHook enabled (by key/cert)');\n      this.options.https.key = fs.readFileSync(this.options.key);\n      this.options.https.cert = fs.readFileSync(this.options.cert);\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else if (this.options.pfx) {\n      debug('HTTPS WebHook enabled (by pfx)');\n      this.options.https.pfx = fs.readFileSync(this.options.pfx);\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else if (Object.keys(this.options.https).length) {\n      debug('HTTPS WebHook enabled by (https)');\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else {\n      debug('HTTP WebHook enabled');\n      this._webServer = http.createServer(this._requestListener);\n    }\n  }\n\n  /**\n   * Open WebHook by listening on the port\n   * @return {Promise}\n   */\n  open() {\n    if (this.isOpen()) {\n      return Promise.resolve();\n    }\n    return new Promise(resolve => {\n      this._webServer.listen(this.options.port, this.options.host, () => {\n        debug('WebHook listening on port %s', this.options.port);\n        this._open = true;\n        return resolve();\n      });\n    });\n  }\n\n  /**\n   * Close the webHook\n   * @return {Promise}\n   */\n  close() {\n    if (!this.isOpen()) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      this._webServer.close(error => {\n        if (error) return reject(error);\n        this._open = false;\n        return resolve();\n      });\n    });\n  }\n\n  /**\n   * Return `true` if server is listening. Otherwise, `false`.\n   */\n  isOpen() {\n    // NOTE: Since `http.Server.listening` was added in v5.7.0\n    // and we still need to support Node v4,\n    // we are going to fallback to 'this._open'.\n    // The following LOC would suffice for newer versions of Node.js\n    // return this._webServer.listening;\n    return this._open;\n  }\n\n  /**\n   * Handle error thrown during processing of webhook request.\n   * @private\n   * @param  {Error} error\n   */\n  _error(error) {\n    if (!this.bot.listeners('webhook_error').length) {\n      return console.error(error); // eslint-disable-line no-console\n    }\n    return this.bot.emit('webhook_error', error);\n  }\n\n  /**\n   * Handle request body by passing it to 'callback'\n   * @private\n   */\n  _parseBody(error, body) {\n    if (error) {\n      return this._error(new errors.FatalError(error));\n    }\n\n    let data;\n    try {\n      data = JSON.parse(body.toString());\n    } catch (parseError) {\n      return this._error(new errors.ParseError(parseError.message));\n    }\n\n    return this.bot.processUpdate(data);\n  }\n\n  /**\n   * Listener for 'request' event on server\n   * @private\n   * @see https://nodejs.org/docs/latest/api/http.html#http_http_createserver_requestlistener\n   * @see https://nodejs.org/docs/latest/api/https.html#https_https_createserver_options_requestlistener\n   */\n  _requestListener(req, res) {\n    debug('WebHook request URL: %s', req.url);\n    debug('WebHook request headers: %j', req.headers);\n\n    if (req.url.indexOf(this.bot.token) !== -1) {\n      if (req.method !== 'POST') {\n        debug('WebHook request isn\\'t a POST');\n        res.statusCode = 418; // I'm a teabot!\n        res.end();\n      } else {\n        req\n          .pipe(bl(this._parseBody))\n          .on('finish', () => res.end('OK'));\n      }\n    } else if (this._healthRegex.test(req.url)) {\n      debug('WebHook health check passed');\n      res.statusCode = 200;\n      res.end('OK');\n    } else {\n      debug('WebHook request unauthorized');\n      res.statusCode = 401;\n      res.end();\n    }\n  }\n}\n\nmodule.exports = TelegramBotWebHook;\n","/home/travis/build/npmtest/node-npmtest-node-telegram-bot-api/node_modules/node-telegram-bot-api/src/telegramPolling.js":"const debug = require('debug')('node-telegram-bot-api');\nconst deprecate = require('depd')('node-telegram-bot-api');\nconst ANOTHER_WEB_HOOK_USED = 409;\n\n\nclass TelegramBotPolling {\n  /**\n   * Handles polling against the Telegram servers.\n   * @param  {TelegramBot} bot\n   * @see https://core.telegram.org/bots/api#getting-updates\n   */\n  constructor(bot) {\n    this.bot = bot;\n    this.options = (typeof bot.options.polling === 'boolean') ? {} : bot.options.polling;\n    this.options.interval = (typeof this.options.interval === 'number') ? this.options.interval : 300;\n    this.options.params = (typeof this.options.params === 'object') ? this.options.params : {};\n    this.options.params.offset = (typeof this.options.params.offset === 'number') ? this.options.params.offset : 0;\n    if (typeof this.options.timeout === 'number') {\n      deprecate('`options.polling.timeout` is deprecated. Use `options.polling.params` instead.');\n      this.options.params.timeout = this.options.timeout;\n    } else {\n      this.options.params.timeout = 10;\n    }\n    this._lastUpdate = 0;\n    this._lastRequest = null;\n    this._abort = false;\n    this._pollingTimeout = null;\n  }\n\n  /**\n   * Start polling\n   * @param  {Object} [options]\n   * @param  {Object} [options.restart]\n   * @return {Promise}\n   */\n  start(options = {}) {\n    if (this._lastRequest) {\n      if (!options.restart) {\n        return Promise.resolve();\n      }\n      return this.stop({\n        cancel: true,\n        reason: 'Polling restart',\n      }).then(() => {\n        return this._polling();\n      });\n    }\n    return this._polling();\n  }\n\n  /**\n   * Stop polling\n   * @param  {Object} [options]\n   * @param  {Boolean} [options.cancel] Cancel current request\n   * @param  {String} [options.reason] Reason for stopping polling\n   * @return {Promise}\n   */\n  stop(options = {}) {\n    if (!this._lastRequest) {\n      return Promise.resolve();\n    }\n    const lastRequest = this._lastRequest;\n    this._lastRequest = null;\n    clearTimeout(this._pollingTimeout);\n    if (options.cancel) {\n      const reason = options.reason || 'Polling stop';\n      lastRequest.cancel(reason);\n      return Promise.resolve();\n    }\n    this._abort = true;\n    return lastRequest.finally(() => {\n      this._abort = false;\n    });\n  }\n\n  /**\n   * Return `true` if is polling. Otherwise, `false`.\n   */\n  isPolling() {\n    return !!this._lastRequest;\n  }\n\n  /**\n   * Invokes polling (with recursion!)\n   * @return {Promise} promise of the current request\n   * @private\n   */\n  _polling() {\n    this._lastRequest = this\n      ._getUpdates()\n      .then(updates => {\n        this._lastUpdate = Date.now();\n        debug('polling data %j', updates);\n        updates.forEach(update => {\n          this.options.params.offset = update.update_id + 1;\n          debug('updated offset: %s', this.options.params.offset);\n          this.bot.processUpdate(update);\n        });\n        return null;\n      })\n      .catch(err => {\n        debug('polling error: %s', err.message);\n        if (this.bot.listeners('polling_error').length) {\n          this.bot.emit('polling_error', err);\n        } else {\n          console.error(err); // eslint-disable-line no-console\n        }\n        return null;\n      })\n      .finally(() => {\n        if (this._abort) {\n          debug('Polling is aborted!');\n        } else {\n          debug('setTimeout for %s miliseconds', this.options.interval);\n          this._pollingTimeout = setTimeout(() => this._polling(), this.options.interval);\n        }\n      });\n    return this._lastRequest;\n  }\n\n  /**\n   * Unset current webhook. Used when we detect that a webhook has been set\n   * and we are trying to poll. Polling and WebHook are mutually exclusive.\n   * @see https://core.telegram.org/bots/api#getting-updates\n   * @private\n   */\n  _unsetWebHook() {\n    debug('unsetting webhook');\n    return this.bot._request('setWebHook');\n  }\n\n  /**\n   * Retrieve updates\n   */\n  _getUpdates() {\n    debug('polling with options: %j', this.options.params);\n    return this.bot.getUpdates(this.options.params)\n      .catch(err => {\n        if (err.response && err.response.statusCode === ANOTHER_WEB_HOOK_USED) {\n          return this._unsetWebHook().then(() => {\n            return this.bot.getUpdates(this.options.params);\n          });\n        }\n        throw err;\n      });\n  }\n}\n\nmodule.exports = TelegramBotPolling;\n","/home/travis/build/npmtest/node-npmtest-node-telegram-bot-api/node_modules/node-telegram-bot-api/lib/errors.js":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nexports.BaseError = function (_Error) {\n  _inherits(BaseError, _Error);\n\n  /**\n   * @class BaseError\n   * @constructor\n   * @private\n   * @param  {String} code Error code\n   * @param  {String} message Error message\n   */\n  function BaseError(code, message) {\n    _classCallCheck(this, BaseError);\n\n    var _this = _possibleConstructorReturn(this, (BaseError.__proto__ || Object.getPrototypeOf(BaseError)).call(this, code + ': ' + message));\n\n    _this.code = code;\n    return _this;\n  }\n\n  return BaseError;\n}(Error);\n\nexports.FatalError = function (_exports$BaseError) {\n  _inherits(FatalError, _exports$BaseError);\n\n  /**\n   * Fatal Error. Error code is `\"EFATAL\"`.\n   * @class FatalError\n   * @constructor\n   * @param  {String|Error} data Error object or message\n   */\n  function FatalError(data) {\n    _classCallCheck(this, FatalError);\n\n    var error = typeof data === 'string' ? null : data;\n    var message = error ? error.message : data;\n\n    var _this2 = _possibleConstructorReturn(this, (FatalError.__proto__ || Object.getPrototypeOf(FatalError)).call(this, 'EFATAL', message));\n\n    if (error) _this2.stack = error.stack;\n    return _this2;\n  }\n\n  return FatalError;\n}(exports.BaseError);\n\nexports.ParseError = function (_exports$BaseError2) {\n  _inherits(ParseError, _exports$BaseError2);\n\n  /**\n   * Error during parsing. Error code is `\"EPARSE\"`.\n   * @class ParseError\n   * @constructor\n   * @param  {String} message Error message\n   * @param  {http.IncomingMessage} response Server response\n   */\n  function ParseError(message, response) {\n    _classCallCheck(this, ParseError);\n\n    var _this3 = _possibleConstructorReturn(this, (ParseError.__proto__ || Object.getPrototypeOf(ParseError)).call(this, 'EPARSE', message));\n\n    _this3.response = response;\n    return _this3;\n  }\n\n  return ParseError;\n}(exports.BaseError);\n\nexports.TelegramError = function (_exports$BaseError3) {\n  _inherits(TelegramError, _exports$BaseError3);\n\n  /**\n   * Error returned from Telegram. Error code is `\"ETELEGRAM\"`.\n   * @class TelegramError\n   * @constructor\n   * @param  {String} message Error message\n   * @param  {http.IncomingMessage} response Server response\n   */\n  function TelegramError(message, response) {\n    _classCallCheck(this, TelegramError);\n\n    var _this4 = _possibleConstructorReturn(this, (TelegramError.__proto__ || Object.getPrototypeOf(TelegramError)).call(this, 'ETELEGRAM', message));\n\n    _this4.response = response;\n    return _this4;\n  }\n\n  return TelegramError;\n}(exports.BaseError);","/home/travis/build/npmtest/node-npmtest-node-telegram-bot-api/node_modules/node-telegram-bot-api/lib/telegram.js":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// shims\nrequire('array.prototype.findindex').shim(); // for Node.js v0.x\n\nvar errors = require('./errors');\nvar TelegramBotWebHook = require('./telegramWebHook');\nvar TelegramBotPolling = require('./telegramPolling');\nvar debug = require('debug')('node-telegram-bot-api');\nvar EventEmitter = require('eventemitter3');\nvar fileType = require('file-type');\nvar Promise = require('bluebird');\nvar request = require('request-promise');\nvar streamedRequest = require('request');\nvar qs = require('querystring');\nvar stream = require('stream');\nvar mime = require('mime');\nvar path = require('path');\nvar URL = require('url');\nvar fs = require('fs');\nvar pump = require('pump');\nvar deprecate = require('depd')('node-telegram-bot-api');\n\nvar _messageTypes = ['text', 'audio', 'document', 'photo', 'sticker', 'video', 'voice', 'contact', 'location', 'new_chat_participant', 'left_chat_participant', 'new_chat_title', 'new_chat_photo', 'delete_chat_photo', 'group_chat_created'];\n\n// enable cancellation\nPromise.config({\n  cancellation: true\n});\n\nvar TelegramBot = function (_EventEmitter) {\n  _inherits(TelegramBot, _EventEmitter);\n\n  _createClass(TelegramBot, null, [{\n    key: 'errors',\n    get: function get() {\n      return errors;\n    }\n  }, {\n    key: 'messageTypes',\n    get: function get() {\n      return _messageTypes;\n    }\n\n    /**\n     * Both request method to obtain messages are implemented. To use standard polling, set `polling: true`\n     * on `options`. Notice that [webHook](https://core.telegram.org/bots/api#setwebhook) will need a SSL certificate.\n     * Emits `message` when a message arrives.\n     *\n     * @class TelegramBot\n     * @constructor\n     * @param {String} token Bot Token\n     * @param {Object} [options]\n     * @param {Boolean|Object} [options.polling=false] Set true to enable polling or set options.\n     *  If a WebHook has been set, it will be deleted automatically.\n     * @param {String|Number} [options.polling.timeout=10] *Deprecated. Use `options.polling.params` instead*.\n     *  Timeout in seconds for long polling.\n     * @param {String|Number} [options.polling.interval=300] Interval between requests in miliseconds\n     * @param {Boolean} [options.polling.autoStart=true] Start polling immediately\n     * @param {Object} [options.polling.params] Parameters to be used in polling API requests.\n     *  See https://core.telegram.org/bots/api#getupdates for more information.\n     * @param  {Number} [options.polling.params.timeout=10] Timeout in seconds for long polling.\n     * @param {Boolean|Object} [options.webHook=false] Set true to enable WebHook or set options\n     * @param {String} [options.webHook.host=0.0.0.0] Host to bind to\n     * @param {Number} [options.webHook.port=8443] Port to bind to\n     * @param {String} [options.webHook.key] Path to file with PEM private key for webHook server.\n     *  The file is read **synchronously**!\n     * @param {String} [options.webHook.cert] Path to file with PEM certificate (public) for webHook server.\n     *  The file is read **synchronously**!\n     * @param {String} [options.webHook.pfx] Path to file with PFX private key and certificate chain for webHook server.\n     *  The file is read **synchronously**!\n     * @param {Boolean} [options.webHook.autoOpen=true] Open webHook immediately\n     * @param {Object} [options.webHook.https] Options to be passed to `https.createServer()`.\n     *  Note that `options.webHook.key`, `options.webHook.cert` and `options.webHook.pfx`, if provided, will be\n     *  used to override `key`, `cert` and `pfx` in this object, respectively.\n     *  See https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener for more information.\n     * @param {String} [options.webHook.healthEndpoint=/healthz] An endpoint for health checks that always responds with 200 OK\n     * @param {Boolean} [options.onlyFirstMatch=false] Set to true to stop after first match. Otherwise, all regexps are executed\n     * @param {Object} [options.request] Options which will be added for all requests to telegram api.\n     *  See https://github.com/request/request#requestoptions-callback for more information.\n     * @param {String} [options.baseApiUrl=https://api.telegram.org] API Base URl; useful for proxying and testing\n     * @param {Boolean} [options.filepath=true] Allow passing file-paths as arguments when sending files,\n     *  such as photos using `TelegramBot#sendPhoto()`. See [usage information][usage-sending-files-performance]\n     *  for more information on this option and its consequences.\n     * @see https://core.telegram.org/bots/api\n     */\n\n  }]);\n\n  function TelegramBot(token) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, TelegramBot);\n\n    var _this = _possibleConstructorReturn(this, (TelegramBot.__proto__ || Object.getPrototypeOf(TelegramBot)).call(this));\n\n    _this.token = token;\n    _this.options = options;\n    _this.options.polling = typeof options.polling === 'undefined' ? false : options.polling;\n    _this.options.webHook = typeof options.webHook === 'undefined' ? false : options.webHook;\n    _this.options.baseApiUrl = options.baseApiUrl || 'https://api.telegram.org';\n    _this.options.filepath = typeof options.filepath === 'undefined' ? true : options.filepath;\n    _this._textRegexpCallbacks = [];\n    _this._replyListenerId = 0;\n    _this._replyListeners = [];\n    _this._polling = null;\n    _this._webHook = null;\n\n    if (options.polling) {\n      var autoStart = options.polling.autoStart;\n      if (typeof autoStart === 'undefined' || autoStart === true) {\n        _this.startPolling();\n      }\n    }\n\n    if (options.webHook) {\n      var autoOpen = options.webHook.autoOpen;\n      if (typeof autoOpen === 'undefined' || autoOpen === true) {\n        _this.openWebHook();\n      }\n    }\n    return _this;\n  }\n\n  /**\n   * Generates url with bot token and provided path/method you want to be got/executed by bot\n   * @param  {String} path\n   * @return {String} url\n   * @private\n   * @see https://core.telegram.org/bots/api#making-requests\n   */\n\n\n  _createClass(TelegramBot, [{\n    key: '_buildURL',\n    value: function _buildURL(_path) {\n      return this.options.baseApiUrl + '/bot' + this.token + '/' + _path;\n    }\n\n    /**\n     * Fix 'reply_markup' parameter by making it JSON-serialized, as\n     * required by the Telegram Bot API\n     * @param {Object} obj Object; either 'form' or 'qs'\n     * @private\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n\n  }, {\n    key: '_fixReplyMarkup',\n    value: function _fixReplyMarkup(obj) {\n      var replyMarkup = obj.reply_markup;\n      if (replyMarkup && typeof replyMarkup !== 'string') {\n        obj.reply_markup = JSON.stringify(replyMarkup);\n      }\n    }\n\n    /**\n     * Make request against the API\n     * @param  {String} _path API endpoint\n     * @param  {Object} [options]\n     * @private\n     * @return {Promise}\n     */\n\n  }, {\n    key: '_request',\n    value: function _request(_path) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!this.token) {\n        return Promise.reject(new errors.FatalError('Telegram Bot Token not provided!'));\n      }\n\n      if (this.options.request) {\n        Object.assign(options, this.options.request);\n      }\n\n      if (options.form) {\n        this._fixReplyMarkup(options.form);\n      }\n      if (options.qs) {\n        this._fixReplyMarkup(options.qs);\n      }\n\n      options.method = 'POST';\n      options.url = this._buildURL(_path);\n      options.simple = false;\n      options.resolveWithFullResponse = true;\n      options.forever = true;\n      debug('HTTP request: %j', options);\n      return request(options).then(function (resp) {\n        var data = void 0;\n        try {\n          data = resp.body = JSON.parse(resp.body);\n        } catch (err) {\n          throw new errors.ParseError('Error parsing Telegram response: ' + resp.body, resp);\n        }\n\n        if (data.ok) {\n          return data.result;\n        }\n\n        throw new errors.TelegramError(data.error_code + ' ' + data.description, resp);\n      }).catch(function (error) {\n        // TODO: why can't we do `error instanceof errors.BaseError`?\n        if (error.response) throw error;\n        throw new errors.FatalError(error);\n      });\n    }\n\n    /**\n     * Format data to be uploaded; handles file paths, streams and buffers\n     * @param  {String} type\n     * @param  {String|stream.Stream|Buffer} data\n     * @return {Array} formatted\n     * @return {Object} formatted[0] formData\n     * @return {String} formatted[1] fileId\n     * @throws Error if Buffer file type is not supported.\n     * @see https://npmjs.com/package/file-type\n     * @private\n     */\n\n  }, {\n    key: '_formatSendData',\n    value: function _formatSendData(type, data) {\n      var formData = void 0;\n      var fileName = void 0;\n      var fileId = void 0;\n      if (data instanceof stream.Stream) {\n        // Will be 'null' if could not be parsed. Default to 'filename'.\n        // For example, 'data.path' === '/?id=123' from 'request(\"https://example.com/?id=123\")'\n        fileName = URL.parse(path.basename(data.path.toString())).pathname || 'filename';\n        formData = {};\n        formData[type] = {\n          value: data,\n          options: {\n            filename: qs.unescape(fileName),\n            contentType: mime.lookup(fileName)\n          }\n        };\n      } else if (Buffer.isBuffer(data)) {\n        var filetype = fileType(data);\n        if (!filetype) {\n          throw new errors.FatalError('Unsupported Buffer file type');\n        }\n        formData = {};\n        formData[type] = {\n          value: data,\n          options: {\n            filename: 'data.' + filetype.ext,\n            contentType: filetype.mime\n          }\n        };\n      } else if (!this.options.filepath) {\n        /**\n         * When the constructor option 'filepath' is set to\n         * 'false', we do not support passing file-paths.\n         */\n        fileId = data;\n      } else if (fs.existsSync(data)) {\n        fileName = path.basename(data);\n        formData = {};\n        formData[type] = {\n          value: fs.createReadStream(data),\n          options: {\n            filename: fileName,\n            contentType: mime.lookup(fileName)\n          }\n        };\n      } else {\n        fileId = data;\n      }\n      return [formData, fileId];\n    }\n\n    /**\n     * Start polling.\n     * Rejects returned promise if a WebHook is being used by this instance.\n     * @param  {Object} [options]\n     * @param  {Boolean} [options.restart=true] Consecutive calls to this method causes polling to be restarted\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'startPolling',\n    value: function startPolling() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (this.hasOpenWebHook()) {\n        return Promise.reject(new errors.FatalError('Polling and WebHook are mutually exclusive'));\n      }\n      options.restart = typeof options.restart === 'undefined' ? true : options.restart;\n      if (!this._polling) {\n        this._polling = new TelegramBotPolling(this);\n      }\n      return this._polling.start(options);\n    }\n\n    /**\n     * Alias of `TelegramBot#startPolling()`. This is **deprecated**.\n     * @param  {Object} [options]\n     * @return {Promise}\n     * @deprecated\n     */\n\n  }, {\n    key: 'initPolling',\n    value: function initPolling() {\n      deprecate('TelegramBot#initPolling() is deprecated');\n      return this.startPolling();\n    }\n\n    /**\n     * Stops polling after the last polling request resolves.\n     * Multiple invocations do nothing if polling is already stopped.\n     * Returning the promise of the last polling request is **deprecated**.\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'stopPolling',\n    value: function stopPolling() {\n      if (!this._polling) {\n        return Promise.resolve();\n      }\n      return this._polling.stop();\n    }\n\n    /**\n     * Return true if polling. Otherwise, false.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isPolling',\n    value: function isPolling() {\n      return this._polling ? this._polling.isPolling() : false;\n    }\n\n    /**\n     * Open webhook.\n     * Multiple invocations do nothing if webhook is already open.\n     * Rejects returned promise if Polling is being used by this instance.\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'openWebHook',\n    value: function openWebHook() {\n      if (this.isPolling()) {\n        return Promise.reject(new errors.FatalError('WebHook and Polling are mutually exclusive'));\n      }\n      if (!this._webHook) {\n        this._webHook = new TelegramBotWebHook(this);\n      }\n      return this._webHook.open();\n    }\n\n    /**\n     * Close webhook after closing all current connections.\n     * Multiple invocations do nothing if webhook is already closed.\n     * @return {Promise} promise\n     */\n\n  }, {\n    key: 'closeWebHook',\n    value: function closeWebHook() {\n      if (!this._webHook) {\n        return Promise.resolve();\n      }\n      return this._webHook.close();\n    }\n\n    /**\n     * Return true if using webhook and it is open i.e. accepts connections.\n     * Otherwise, false.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'hasOpenWebHook',\n    value: function hasOpenWebHook() {\n      return this._webHook ? this._webHook.isOpen() : false;\n    }\n\n    /**\n     * Returns basic information about the bot in form of a `User` object.\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#getme\n     */\n\n  }, {\n    key: 'getMe',\n    value: function getMe() {\n      var _path = 'getMe';\n      return this._request(_path);\n    }\n\n    /**\n     * Specify an url to receive incoming updates via an outgoing webHook.\n     * This method has an [older, compatible signature][setWebHook-v0.25.0]\n     * that is being deprecated.\n     *\n     * @param  {String} url URL where Telegram will make HTTP Post. Leave empty to\n     * delete webHook.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {String|stream.Stream} [options.certificate] PEM certificate key (public).\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#setwebhook\n     */\n\n  }, {\n    key: 'setWebHook',\n    value: function setWebHook(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      /* The older method signature was setWebHook(url, cert).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library */\n      var cert = void 0;\n      // Note: 'options' could be an object, if a stream was provided (in place of 'cert')\n      if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object' || options instanceof stream.Stream) {\n        deprecate('The method signature setWebHook(url, cert) has been deprecated since v0.25.0');\n        cert = options;\n        options = {}; // eslint-disable-line no-param-reassign\n      } else {\n        cert = options.certificate;\n      }\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.url = url;\n\n      if (cert) {\n        try {\n          var sendData = this._formatSendData('certificate', cert);\n          opts.formData = sendData[0];\n          opts.qs.certificate = sendData[1];\n        } catch (ex) {\n          return Promise.reject(ex);\n        }\n      }\n\n      return this._request('setWebHook', opts);\n    }\n\n    /**\n     * Use this method to remove webhook integration if you decide to\n     * switch back to getUpdates. Returns True on success.\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#deletewebhook\n     */\n\n  }, {\n    key: 'deleteWebHook',\n    value: function deleteWebHook() {\n      return this._request('deleteWebhook');\n    }\n\n    /**\n     * Use this method to get current webhook status.\n     * On success, returns a [WebhookInfo](https://core.telegram.org/bots/api#webhookinfo) object.\n     * If the bot is using getUpdates, will return an object with the\n     * url field empty.\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#getwebhookinfo\n     */\n\n  }, {\n    key: 'getWebHookInfo',\n    value: function getWebHookInfo() {\n      return this._request('getWebhookInfo');\n    }\n\n    /**\n     * Use this method to receive incoming updates using long polling.\n     * This method has an [older, compatible signature][getUpdates-v0.25.0]\n     * that is being deprecated.\n     *\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#getupdates\n     */\n\n  }, {\n    key: 'getUpdates',\n    value: function getUpdates() {\n      var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      /* The older method signature was getUpdates(timeout, limit, offset).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library */\n      if ((typeof form === 'undefined' ? 'undefined' : _typeof(form)) !== 'object') {\n        /* eslint-disable no-param-reassign, prefer-rest-params */\n        deprecate('The method signature getUpdates(timeout, limit, offset) has been deprecated since v0.25.0');\n        form = {\n          timeout: arguments[0],\n          limit: arguments[1],\n          offset: arguments[2]\n        };\n        /* eslint-enable no-param-reassign, prefer-rest-params */\n      }\n\n      return this._request('getUpdates', { form: form });\n    }\n\n    /**\n     * Process an update; emitting the proper events and executing regexp\n     * callbacks. This method is useful should you be using a different\n     * way to fetch updates, other than those provided by TelegramBot.\n     * @param  {Object} update\n     * @see https://core.telegram.org/bots/api#update\n     */\n\n  }, {\n    key: 'processUpdate',\n    value: function processUpdate(update) {\n      var _this2 = this;\n\n      debug('Process Update %j', update);\n      var message = update.message;\n      var editedMessage = update.edited_message;\n      var channelPost = update.channel_post;\n      var editedChannelPost = update.edited_channel_post;\n      var inlineQuery = update.inline_query;\n      var chosenInlineResult = update.chosen_inline_result;\n      var callbackQuery = update.callback_query;\n\n      if (message) {\n        debug('Process Update message %j', message);\n        this.emit('message', message);\n        var processMessageType = function processMessageType(messageType) {\n          if (message[messageType]) {\n            debug('Emitting %s: %j', messageType, message);\n            _this2.emit(messageType, message);\n          }\n        };\n        TelegramBot.messageTypes.forEach(processMessageType);\n        if (message.text) {\n          debug('Text message');\n          this._textRegexpCallbacks.some(function (reg) {\n            debug('Matching %s with %s', message.text, reg.regexp);\n            var result = reg.regexp.exec(message.text);\n            if (!result) {\n              return false;\n            }\n            debug('Matches %s', reg.regexp);\n            reg.callback(message, result);\n            // returning truthy value exits .some\n            return _this2.options.onlyFirstMatch;\n          });\n        }\n        if (message.reply_to_message) {\n          // Only callbacks waiting for this message\n          this._replyListeners.forEach(function (reply) {\n            // Message from the same chat\n            if (reply.chatId === message.chat.id) {\n              // Responding to that message\n              if (reply.messageId === message.reply_to_message.message_id) {\n                // Resolve the promise\n                reply.callback(message);\n              }\n            }\n          });\n        }\n      } else if (editedMessage) {\n        debug('Process Update edited_message %j', editedMessage);\n        this.emit('edited_message', editedMessage);\n        if (editedMessage.text) {\n          this.emit('edited_message_text', editedMessage);\n        }\n        if (editedMessage.caption) {\n          this.emit('edited_message_caption', editedMessage);\n        }\n      } else if (channelPost) {\n        debug('Process Update channel_post %j', channelPost);\n        this.emit('channel_post', channelPost);\n      } else if (editedChannelPost) {\n        debug('Process Update edited_channel_post %j', editedChannelPost);\n        this.emit('edited_channel_post', editedChannelPost);\n        if (editedChannelPost.text) {\n          this.emit('edited_channel_post_text', editedChannelPost);\n        }\n        if (editedChannelPost.caption) {\n          this.emit('edited_channel_post_caption', editedChannelPost);\n        }\n      } else if (inlineQuery) {\n        debug('Process Update inline_query %j', inlineQuery);\n        this.emit('inline_query', inlineQuery);\n      } else if (chosenInlineResult) {\n        debug('Process Update chosen_inline_result %j', chosenInlineResult);\n        this.emit('chosen_inline_result', chosenInlineResult);\n      } else if (callbackQuery) {\n        debug('Process Update callback_query %j', callbackQuery);\n        this.emit('callback_query', callbackQuery);\n      }\n    }\n\n    /**\n     * Send text message.\n     * @param  {Number|String} chatId Unique identifier for the message recipient\n     * @param  {String} text Text of the message to be sent\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#sendmessage\n     */\n\n  }, {\n    key: 'sendMessage',\n    value: function sendMessage(chatId, text) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.text = text;\n      return this._request('sendMessage', { form: form });\n    }\n\n    /**\n     * Send answers to an inline query.\n     * @param  {String} inlineQueryId Unique identifier of the query\n     * @param  {InlineQueryResult[]} results An array of results for the inline query\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#answerinlinequery\n     */\n\n  }, {\n    key: 'answerInlineQuery',\n    value: function answerInlineQuery(inlineQueryId, results) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.inline_query_id = inlineQueryId;\n      form.results = JSON.stringify(results);\n      return this._request('answerInlineQuery', { form: form });\n    }\n\n    /**\n     * Forward messages of any kind.\n     * @param  {Number|String} chatId     Unique identifier for the message recipient\n     * @param  {Number|String} fromChatId Unique identifier for the chat where the\n     * original message was sent\n     * @param  {Number|String} messageId  Unique message identifier\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'forwardMessage',\n    value: function forwardMessage(chatId, fromChatId, messageId) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.from_chat_id = fromChatId;\n      form.message_id = messageId;\n      return this._request('forwardMessage', { form: form });\n    }\n\n    /**\n     * Send photo\n     * @param  {Number|String} chatId  Unique identifier for the message recipient\n     * @param  {String|stream.Stream|Buffer} photo A file path or a Stream. Can\n     * also be a `file_id` previously uploaded\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#sendphoto\n     */\n\n  }, {\n    key: 'sendPhoto',\n    value: function sendPhoto(chatId, photo) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('photo', photo);\n        opts.formData = sendData[0];\n        opts.qs.photo = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendPhoto', opts);\n    }\n\n    /**\n     * Send audio\n     * @param  {Number|String} chatId  Unique identifier for the message recipient\n     * @param  {String|stream.Stream|Buffer} audio A file path, Stream or Buffer.\n     * Can also be a `file_id` previously uploaded.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#sendaudio\n     */\n\n  }, {\n    key: 'sendAudio',\n    value: function sendAudio(chatId, audio) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('audio', audio);\n        opts.formData = sendData[0];\n        opts.qs.audio = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendAudio', opts);\n    }\n\n    /**\n     * Send Document\n     * @param  {Number|String} chatId  Unique identifier for the message recipient\n     * @param  {String|stream.Stream|Buffer} doc A file path, Stream or Buffer.\n     * Can also be a `file_id` previously uploaded.\n     * @param  {Object} [options] Additional Telegram query options\n     * @param  {Object} [fileOpts] Optional file related meta-data\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#sendDocument\n     */\n\n  }, {\n    key: 'sendDocument',\n    value: function sendDocument(chatId, doc) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fileOpts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('document', doc);\n        opts.formData = sendData[0];\n        opts.qs.document = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      if (opts.formData && Object.keys(fileOpts).length) {\n        opts.formData.document.options = fileOpts;\n      }\n      return this._request('sendDocument', opts);\n    }\n\n    /**\n     * Send .webp stickers.\n     * @param  {Number|String} chatId  Unique identifier for the message recipient\n     * @param  {String|stream.Stream|Buffer} sticker A file path, Stream or Buffer.\n     * Can also be a `file_id` previously uploaded. Stickers are WebP format files.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#sendsticker\n     */\n\n  }, {\n    key: 'sendSticker',\n    value: function sendSticker(chatId, sticker) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('sticker', sticker);\n        opts.formData = sendData[0];\n        opts.qs.sticker = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendSticker', opts);\n    }\n\n    /**\n     * Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document).\n     * @param  {Number|String} chatId  Unique identifier for the message recipient\n     * @param  {String|stream.Stream|Buffer} video A file path or Stream.\n     * Can also be a `file_id` previously uploaded.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#sendvideo\n     */\n\n  }, {\n    key: 'sendVideo',\n    value: function sendVideo(chatId, video) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('video', video);\n        opts.formData = sendData[0];\n        opts.qs.video = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendVideo', opts);\n    }\n\n    /**\n     * Send voice\n     * @param  {Number|String} chatId  Unique identifier for the message recipient\n     * @param  {String|stream.Stream|Buffer} voice A file path, Stream or Buffer.\n     * Can also be a `file_id` previously uploaded.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#sendvoice\n     */\n\n  }, {\n    key: 'sendVoice',\n    value: function sendVoice(chatId, voice) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var opts = {\n        qs: options\n      };\n      opts.qs.chat_id = chatId;\n      try {\n        var sendData = this._formatSendData('voice', voice);\n        opts.formData = sendData[0];\n        opts.qs.voice = sendData[1];\n      } catch (ex) {\n        return Promise.reject(ex);\n      }\n      return this._request('sendVoice', opts);\n    }\n\n    /**\n     * Send chat action.\n     * `typing` for text messages,\n     * `upload_photo` for photos, `record_video` or `upload_video` for videos,\n     * `record_audio` or `upload_audio` for audio files, `upload_document` for general files,\n     * `find_location` for location data.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the message recipient\n     * @param  {String} action Type of action to broadcast.\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#sendchataction\n     */\n\n  }, {\n    key: 'sendChatAction',\n    value: function sendChatAction(chatId, action) {\n      var form = {\n        action: action,\n        chat_id: chatId\n      };\n      return this._request('sendChatAction', { form: form });\n    }\n\n    /**\n     * Use this method to kick a user from a group or a supergroup.\n     * In the case of supergroups, the user will not be able to return\n     * to the group on their own using invite links, etc., unless unbanned\n     * first. The bot must be an administrator in the group for this to work.\n     * Returns True on success.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n     * @param  {String} userId  Unique identifier of the target user\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#kickchatmember\n     */\n\n  }, {\n    key: 'kickChatMember',\n    value: function kickChatMember(chatId, userId) {\n      var form = {\n        chat_id: chatId,\n        user_id: userId\n      };\n      return this._request('kickChatMember', { form: form });\n    }\n\n    /**\n     * Use this method to unban a previously kicked user in a supergroup.\n     * The user will not return to the group automatically, but will be\n     * able to join via link, etc. The bot must be an administrator in\n     * the group for this to work. Returns True on success.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n     * @param  {String} userId  Unique identifier of the target user\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#unbanchatmember\n     */\n\n  }, {\n    key: 'unbanChatMember',\n    value: function unbanChatMember(chatId, userId) {\n      var form = {\n        chat_id: chatId,\n        user_id: userId\n      };\n      return this._request('unbanChatMember', { form: form });\n    }\n\n    /**\n     * Use this method to send answers to callback queries sent from\n     * inline keyboards. The answer will be displayed to the user as\n     * a notification at the top of the chat screen or as an alert.\n     * On success, True is returned.\n     *\n     * @param  {Number|String} callbackQueryId  Unique identifier for the query to be answered\n     * @param  {String} text  Text of the notification. If not specified, nothing will be shown to the user\n     * @param  {Boolean} showAlert  Whether to show an alert or a notification at the top of the screen\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#answercallbackquery\n     */\n\n  }, {\n    key: 'answerCallbackQuery',\n    value: function answerCallbackQuery(callbackQueryId, text, showAlert) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.callback_query_id = callbackQueryId;\n      form.text = text;\n      form.show_alert = showAlert;\n      return this._request('answerCallbackQuery', { form: form });\n    }\n\n    /**\n     * Use this method to edit text messages sent by the bot or via\n     * the bot (for inline bots). On success, the edited Message is\n     * returned.\n     *\n     * Note that you must provide one of chat_id, message_id, or\n     * inline_message_id in your request.\n     *\n     * @param  {String} text  New text of the message\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#editmessagetext\n     */\n\n  }, {\n    key: 'editMessageText',\n    value: function editMessageText(text) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.text = text;\n      return this._request('editMessageText', { form: form });\n    }\n\n    /**\n     * Use this method to edit captions of messages sent by the\n     * bot or via the bot (for inline bots). On success, the\n     * edited Message is returned.\n     *\n     * Note that you must provide one of chat_id, message_id, or\n     * inline_message_id in your request.\n     *\n     * @param  {String} caption  New caption of the message\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#editmessagecaption\n     */\n\n  }, {\n    key: 'editMessageCaption',\n    value: function editMessageCaption(caption) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.caption = caption;\n      return this._request('editMessageCaption', { form: form });\n    }\n\n    /**\n     * Use this method to edit only the reply markup of messages\n     * sent by the bot or via the bot (for inline bots).\n     * On success, the edited Message is returned.\n     *\n     * Note that you must provide one of chat_id, message_id, or\n     * inline_message_id in your request.\n     *\n     * @param  {Object} replyMarkup  A JSON-serialized object for an inline keyboard.\n     * @param  {Object} [options] Additional Telegram query options (provide either one of chat_id, message_id, or inline_message_id here)\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#editmessagetext\n     */\n\n  }, {\n    key: 'editMessageReplyMarkup',\n    value: function editMessageReplyMarkup(replyMarkup) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.reply_markup = replyMarkup;\n      return this._request('editMessageReplyMarkup', { form: form });\n    }\n\n    /**\n     * Use this method to get a list of profile pictures for a user.\n     * Returns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object.\n     * This method has an [older, compatible signature][getUserProfilePhotos-v0.25.0]\n     * that is being deprecated.\n     *\n     * @param  {Number|String} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#getuserprofilephotos\n     */\n\n  }, {\n    key: 'getUserProfilePhotos',\n    value: function getUserProfilePhotos(userId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      /* The older method signature was getUserProfilePhotos(userId, offset, limit).\n       * We need to ensure backwards-compatibility while maintaining\n       * consistency of the method signatures throughout the library */\n      if ((typeof form === 'undefined' ? 'undefined' : _typeof(form)) !== 'object') {\n        /* eslint-disable no-param-reassign, prefer-rest-params */\n        deprecate('The method signature getUserProfilePhotos(userId, offset, limit) has been deprecated since v0.25.0');\n        form = {\n          offset: arguments[1],\n          limit: arguments[2]\n        };\n        /* eslint-enable no-param-reassign, prefer-rest-params */\n      }\n      form.user_id = userId;\n      return this._request('getUserProfilePhotos', { form: form });\n    }\n\n    /**\n     * Send location.\n     * Use this method to send point on the map.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the message recipient\n     * @param  {Float} latitude Latitude of location\n     * @param  {Float} longitude Longitude of location\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#sendlocation\n     */\n\n  }, {\n    key: 'sendLocation',\n    value: function sendLocation(chatId, latitude, longitude) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.latitude = latitude;\n      form.longitude = longitude;\n      return this._request('sendLocation', { form: form });\n    }\n\n    /**\n     * Send venue.\n     * Use this method to send information about a venue.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the message recipient\n     * @param  {Float} latitude Latitude of location\n     * @param  {Float} longitude Longitude of location\n     * @param  {String} title Name of the venue\n     * @param  {String} address Address of the venue\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#sendvenue\n     */\n\n  }, {\n    key: 'sendVenue',\n    value: function sendVenue(chatId, latitude, longitude, title, address) {\n      var form = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n\n      form.chat_id = chatId;\n      form.latitude = latitude;\n      form.longitude = longitude;\n      form.title = title;\n      form.address = address;\n      return this._request('sendVenue', { form: form });\n    }\n\n    /**\n     * Send contact.\n     * Use this method to send phone contacts.\n     *\n     * @param  {Number|String} chatId  Unique identifier for the message recipient\n     * @param  {String} phoneNumber Contact's phone number\n     * @param  {String} firstName Contact's first name\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#sendcontact\n     */\n\n  }, {\n    key: 'sendContact',\n    value: function sendContact(chatId, phoneNumber, firstName) {\n      var form = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      form.chat_id = chatId;\n      form.phone_number = phoneNumber;\n      form.first_name = firstName;\n      return this._request('sendContact', { form: form });\n    }\n\n    /**\n     * Get file.\n     * Use this method to get basic info about a file and prepare it for downloading.\n     * Attention: link will be valid for 1 hour.\n     *\n     * @param  {String} fileId  File identifier to get info about\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#getfile\n     */\n\n  }, {\n    key: 'getFile',\n    value: function getFile(fileId) {\n      var form = { file_id: fileId };\n      return this._request('getFile', { form: form });\n    }\n\n    /**\n     * Get link for file.\n     * Use this method to get link for file for subsequent use.\n     * Attention: link will be valid for 1 hour.\n     *\n     * This method is a sugar extension of the (getFile)[#getfilefileid] method,\n     * which returns just path to file on remote server (you will have to manually build full uri after that).\n     *\n     * @param  {String} fileId  File identifier to get info about\n     * @return {Promise} promise Promise which will have *fileURI* in resolve callback\n     * @see https://core.telegram.org/bots/api#getfile\n     */\n\n  }, {\n    key: 'getFileLink',\n    value: function getFileLink(fileId) {\n      var _this3 = this;\n\n      return this.getFile(fileId).then(function (resp) {\n        return _this3.options.baseApiUrl + '/file/bot' + _this3.token + '/' + resp.file_path;\n      });\n    }\n\n    /**\n     * Downloads file in the specified folder.\n     * This is just a sugar for (getFile)[#getfilefiled] method\n     *\n     * @param  {String} fileId  File identifier to get info about\n     * @param  {String} downloadDir Absolute path to the folder in which file will be saved\n     * @return {Promise} promise Promise, which will have *filePath* of downloaded file in resolve callback\n     */\n\n  }, {\n    key: 'downloadFile',\n    value: function downloadFile(fileId, downloadDir) {\n      return this.getFileLink(fileId).then(function (fileURI) {\n        var fileName = fileURI.slice(fileURI.lastIndexOf('/') + 1);\n        // TODO: Ensure fileName doesn't contains slashes\n        var filePath = downloadDir + '/' + fileName;\n\n        // properly handles errors and closes all streams\n        return Promise.fromCallback(function (next) {\n          pump(streamedRequest({ uri: fileURI }), fs.createWriteStream(filePath), next);\n        }).return(filePath);\n      });\n    }\n\n    /**\n     * Register a RegExp to test against an incomming text message.\n     * @param  {RegExp}   regexp       RegExp to be executed with `exec`.\n     * @param  {Function} callback     Callback will be called with 2 parameters,\n     * the `msg` and the result of executing `regexp.exec` on message text.\n     */\n\n  }, {\n    key: 'onText',\n    value: function onText(regexp, callback) {\n      this._textRegexpCallbacks.push({ regexp: regexp, callback: callback });\n    }\n\n    /**\n     * Register a reply to wait for a message response.\n     * @param  {Number|String}   chatId       The chat id where the message cames from.\n     * @param  {Number|String}   messageId    The message id to be replied.\n     * @param  {Function} callback     Callback will be called with the reply\n     *  message.\n     * @return {Number} id                    The ID of the inserted reply listener.\n     */\n\n  }, {\n    key: 'onReplyToMessage',\n    value: function onReplyToMessage(chatId, messageId, callback) {\n      var id = ++this._replyListenerId;\n      this._replyListeners.push({\n        id: id,\n        chatId: chatId,\n        messageId: messageId,\n        callback: callback\n      });\n      return id;\n    }\n\n    /**\n     * Removes a reply that has been prev. registered for a message response.\n     * @param   {Number} replyListenerId      The ID of the reply listener.\n     * @return  {Object} deletedListener      The removed reply listener if\n     *   found. This object has `id`, `chatId`, `messageId` and `callback`\n     *   properties. If not found, returns `null`.\n     */\n\n  }, {\n    key: 'removeReplyListener',\n    value: function removeReplyListener(replyListenerId) {\n      var index = this._replyListeners.findIndex(function (replyListener) {\n        return replyListener.id === replyListenerId;\n      });\n      if (index === -1) {\n        return null;\n      }\n      return this._replyListeners.splice(index, 1)[0];\n    }\n\n    /**\n     * Use this method to get up to date information about the chat\n     * (current name of the user for one-on-one conversations, current\n     * username of a user, group or channel, etc.).\n     * @param  {Number|String} chatId Unique identifier for the target chat or username of the target supergroup or channel\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#getchat\n     */\n\n  }, {\n    key: 'getChat',\n    value: function getChat(chatId) {\n      var form = {\n        chat_id: chatId\n      };\n      return this._request('getChat', { form: form });\n    }\n\n    /**\n     * Returns the administrators in a chat in form of an Array of `ChatMember` objects.\n     * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#getchatadministrators\n     */\n\n  }, {\n    key: 'getChatAdministrators',\n    value: function getChatAdministrators(chatId) {\n      var form = {\n        chat_id: chatId\n      };\n      return this._request('getChatAdministrators', { form: form });\n    }\n\n    /**\n     * Use this method to get the number of members in a chat.\n     * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#getchatmemberscount\n     */\n\n  }, {\n    key: 'getChatMembersCount',\n    value: function getChatMembersCount(chatId) {\n      var form = {\n        chat_id: chatId\n      };\n      return this._request('getChatMembersCount', { form: form });\n    }\n\n    /**\n     * Use this method to get information about a member of a chat.\n     * @param  {Number|String} chatId  Unique identifier for the target group or username of the target supergroup\n     * @param  {String} userId  Unique identifier of the target user\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#getchatmember\n     */\n\n  }, {\n    key: 'getChatMember',\n    value: function getChatMember(chatId, userId) {\n      var form = {\n        chat_id: chatId,\n        user_id: userId\n      };\n      return this._request('getChatMember', { form: form });\n    }\n\n    /**\n     * Leave a group, supergroup or channel.\n     * @param  {Number|String} chatId Unique identifier for the target group or username of the target supergroup (in the format @supergroupusername)\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#leavechat\n     */\n\n  }, {\n    key: 'leaveChat',\n    value: function leaveChat(chatId) {\n      var form = {\n        chat_id: chatId\n      };\n      return this._request('leaveChat', { form: form });\n    }\n\n    /**\n     * Use this method to send a game.\n     * @param  {Number|String} chatId Unique identifier for the message recipient\n     * @param  {String} gameShortName name of the game to be sent.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#sendgame\n     */\n\n  }, {\n    key: 'sendGame',\n    value: function sendGame(chatId, gameShortName) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.chat_id = chatId;\n      form.game_short_name = gameShortName;\n      return this._request('sendGame', { form: form });\n    }\n\n    /**\n     * Use this method to set the score of the specified user in a game.\n     * @param  {String} userId  Unique identifier of the target user\n     * @param  {Number} score New score value.\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#setgamescore\n     */\n\n  }, {\n    key: 'setGameScore',\n    value: function setGameScore(userId, score) {\n      var form = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      form.user_id = userId;\n      form.score = score;\n      return this._request('setGameScore', { form: form });\n    }\n\n    /**\n     * Use this method to get data for high score table.\n     * @param  {String} userId  Unique identifier of the target user\n     * @param  {Object} [options] Additional Telegram query options\n     * @return {Promise}\n     * @see https://core.telegram.org/bots/api#getgamehighscores\n     */\n\n  }, {\n    key: 'getGameHighScores',\n    value: function getGameHighScores(userId) {\n      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      form.user_id = userId;\n      return this._request('getGameHighScores', { form: form });\n    }\n  }]);\n\n  return TelegramBot;\n}(EventEmitter);\n\nmodule.exports = TelegramBot;","/home/travis/build/npmtest/node-npmtest-node-telegram-bot-api/node_modules/node-telegram-bot-api/lib/telegramWebHook.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar errors = require('./errors');\nvar debug = require('debug')('node-telegram-bot-api');\nvar https = require('https');\nvar http = require('http');\nvar fs = require('fs');\nvar bl = require('bl');\nvar Promise = require('bluebird');\n\nvar TelegramBotWebHook = function () {\n  /**\n   * Sets up a webhook to receive updates\n   * @param  {TelegramBot} bot\n   * @see https://core.telegram.org/bots/api#getting-updates\n   */\n  function TelegramBotWebHook(bot) {\n    _classCallCheck(this, TelegramBotWebHook);\n\n    this.bot = bot;\n    this.options = typeof bot.options.webHook === 'boolean' ? {} : bot.options.webHook;\n    this.options.host = this.options.host || '0.0.0.0';\n    this.options.port = this.options.port || 8443;\n    this.options.https = this.options.https || {};\n    this.options.healthEndpoint = this.options.healthEndpoint || '/healthz';\n    this._healthRegex = new RegExp(this.options.healthEndpoint);\n    this._webServer = null;\n    this._open = false;\n    this._requestListener = this._requestListener.bind(this);\n    this._parseBody = this._parseBody.bind(this);\n\n    if (this.options.key && this.options.cert) {\n      debug('HTTPS WebHook enabled (by key/cert)');\n      this.options.https.key = fs.readFileSync(this.options.key);\n      this.options.https.cert = fs.readFileSync(this.options.cert);\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else if (this.options.pfx) {\n      debug('HTTPS WebHook enabled (by pfx)');\n      this.options.https.pfx = fs.readFileSync(this.options.pfx);\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else if (Object.keys(this.options.https).length) {\n      debug('HTTPS WebHook enabled by (https)');\n      this._webServer = https.createServer(this.options.https, this._requestListener);\n    } else {\n      debug('HTTP WebHook enabled');\n      this._webServer = http.createServer(this._requestListener);\n    }\n  }\n\n  /**\n   * Open WebHook by listening on the port\n   * @return {Promise}\n   */\n\n\n  _createClass(TelegramBotWebHook, [{\n    key: 'open',\n    value: function open() {\n      var _this = this;\n\n      if (this.isOpen()) {\n        return Promise.resolve();\n      }\n      return new Promise(function (resolve) {\n        _this._webServer.listen(_this.options.port, _this.options.host, function () {\n          debug('WebHook listening on port %s', _this.options.port);\n          _this._open = true;\n          return resolve();\n        });\n      });\n    }\n\n    /**\n     * Close the webHook\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      var _this2 = this;\n\n      if (!this.isOpen()) {\n        return Promise.resolve();\n      }\n      return new Promise(function (resolve, reject) {\n        _this2._webServer.close(function (error) {\n          if (error) return reject(error);\n          _this2._open = false;\n          return resolve();\n        });\n      });\n    }\n\n    /**\n     * Return `true` if server is listening. Otherwise, `false`.\n     */\n\n  }, {\n    key: 'isOpen',\n    value: function isOpen() {\n      // NOTE: Since `http.Server.listening` was added in v5.7.0\n      // and we still need to support Node v4,\n      // we are going to fallback to 'this._open'.\n      // The following LOC would suffice for newer versions of Node.js\n      // return this._webServer.listening;\n      return this._open;\n    }\n\n    /**\n     * Handle error thrown during processing of webhook request.\n     * @private\n     * @param  {Error} error\n     */\n\n  }, {\n    key: '_error',\n    value: function _error(error) {\n      if (!this.bot.listeners('webhook_error').length) {\n        return console.error(error); // eslint-disable-line no-console\n      }\n      return this.bot.emit('webhook_error', error);\n    }\n\n    /**\n     * Handle request body by passing it to 'callback'\n     * @private\n     */\n\n  }, {\n    key: '_parseBody',\n    value: function _parseBody(error, body) {\n      if (error) {\n        return this._error(new errors.FatalError(error));\n      }\n\n      var data = void 0;\n      try {\n        data = JSON.parse(body.toString());\n      } catch (parseError) {\n        return this._error(new errors.ParseError(parseError.message));\n      }\n\n      return this.bot.processUpdate(data);\n    }\n\n    /**\n     * Listener for 'request' event on server\n     * @private\n     * @see https://nodejs.org/docs/latest/api/http.html#http_http_createserver_requestlistener\n     * @see https://nodejs.org/docs/latest/api/https.html#https_https_createserver_options_requestlistener\n     */\n\n  }, {\n    key: '_requestListener',\n    value: function _requestListener(req, res) {\n      debug('WebHook request URL: %s', req.url);\n      debug('WebHook request headers: %j', req.headers);\n\n      if (req.url.indexOf(this.bot.token) !== -1) {\n        if (req.method !== 'POST') {\n          debug('WebHook request isn\\'t a POST');\n          res.statusCode = 418; // I'm a teabot!\n          res.end();\n        } else {\n          req.pipe(bl(this._parseBody)).on('finish', function () {\n            return res.end('OK');\n          });\n        }\n      } else if (this._healthRegex.test(req.url)) {\n        debug('WebHook health check passed');\n        res.statusCode = 200;\n        res.end('OK');\n      } else {\n        debug('WebHook request unauthorized');\n        res.statusCode = 401;\n        res.end();\n      }\n    }\n  }]);\n\n  return TelegramBotWebHook;\n}();\n\nmodule.exports = TelegramBotWebHook;","/home/travis/build/npmtest/node-npmtest-node-telegram-bot-api/node_modules/node-telegram-bot-api/lib/telegramPolling.js":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar debug = require('debug')('node-telegram-bot-api');\nvar deprecate = require('depd')('node-telegram-bot-api');\nvar ANOTHER_WEB_HOOK_USED = 409;\n\nvar TelegramBotPolling = function () {\n  /**\n   * Handles polling against the Telegram servers.\n   * @param  {TelegramBot} bot\n   * @see https://core.telegram.org/bots/api#getting-updates\n   */\n  function TelegramBotPolling(bot) {\n    _classCallCheck(this, TelegramBotPolling);\n\n    this.bot = bot;\n    this.options = typeof bot.options.polling === 'boolean' ? {} : bot.options.polling;\n    this.options.interval = typeof this.options.interval === 'number' ? this.options.interval : 300;\n    this.options.params = _typeof(this.options.params) === 'object' ? this.options.params : {};\n    this.options.params.offset = typeof this.options.params.offset === 'number' ? this.options.params.offset : 0;\n    if (typeof this.options.timeout === 'number') {\n      deprecate('`options.polling.timeout` is deprecated. Use `options.polling.params` instead.');\n      this.options.params.timeout = this.options.timeout;\n    } else {\n      this.options.params.timeout = 10;\n    }\n    this._lastUpdate = 0;\n    this._lastRequest = null;\n    this._abort = false;\n    this._pollingTimeout = null;\n  }\n\n  /**\n   * Start polling\n   * @param  {Object} [options]\n   * @param  {Object} [options.restart]\n   * @return {Promise}\n   */\n\n\n  _createClass(TelegramBotPolling, [{\n    key: 'start',\n    value: function start() {\n      var _this = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (this._lastRequest) {\n        if (!options.restart) {\n          return Promise.resolve();\n        }\n        return this.stop({\n          cancel: true,\n          reason: 'Polling restart'\n        }).then(function () {\n          return _this._polling();\n        });\n      }\n      return this._polling();\n    }\n\n    /**\n     * Stop polling\n     * @param  {Object} [options]\n     * @param  {Boolean} [options.cancel] Cancel current request\n     * @param  {String} [options.reason] Reason for stopping polling\n     * @return {Promise}\n     */\n\n  }, {\n    key: 'stop',\n    value: function stop() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!this._lastRequest) {\n        return Promise.resolve();\n      }\n      var lastRequest = this._lastRequest;\n      this._lastRequest = null;\n      clearTimeout(this._pollingTimeout);\n      if (options.cancel) {\n        var reason = options.reason || 'Polling stop';\n        lastRequest.cancel(reason);\n        return Promise.resolve();\n      }\n      this._abort = true;\n      return lastRequest.finally(function () {\n        _this2._abort = false;\n      });\n    }\n\n    /**\n     * Return `true` if is polling. Otherwise, `false`.\n     */\n\n  }, {\n    key: 'isPolling',\n    value: function isPolling() {\n      return !!this._lastRequest;\n    }\n\n    /**\n     * Invokes polling (with recursion!)\n     * @return {Promise} promise of the current request\n     * @private\n     */\n\n  }, {\n    key: '_polling',\n    value: function _polling() {\n      var _this3 = this;\n\n      this._lastRequest = this._getUpdates().then(function (updates) {\n        _this3._lastUpdate = Date.now();\n        debug('polling data %j', updates);\n        updates.forEach(function (update) {\n          _this3.options.params.offset = update.update_id + 1;\n          debug('updated offset: %s', _this3.options.params.offset);\n          _this3.bot.processUpdate(update);\n        });\n        return null;\n      }).catch(function (err) {\n        debug('polling error: %s', err.message);\n        if (_this3.bot.listeners('polling_error').length) {\n          _this3.bot.emit('polling_error', err);\n        } else {\n          console.error(err); // eslint-disable-line no-console\n        }\n        return null;\n      }).finally(function () {\n        if (_this3._abort) {\n          debug('Polling is aborted!');\n        } else {\n          debug('setTimeout for %s miliseconds', _this3.options.interval);\n          _this3._pollingTimeout = setTimeout(function () {\n            return _this3._polling();\n          }, _this3.options.interval);\n        }\n      });\n      return this._lastRequest;\n    }\n\n    /**\n     * Unset current webhook. Used when we detect that a webhook has been set\n     * and we are trying to poll. Polling and WebHook are mutually exclusive.\n     * @see https://core.telegram.org/bots/api#getting-updates\n     * @private\n     */\n\n  }, {\n    key: '_unsetWebHook',\n    value: function _unsetWebHook() {\n      debug('unsetting webhook');\n      return this.bot._request('setWebHook');\n    }\n\n    /**\n     * Retrieve updates\n     */\n\n  }, {\n    key: '_getUpdates',\n    value: function _getUpdates() {\n      var _this4 = this;\n\n      debug('polling with options: %j', this.options.params);\n      return this.bot.getUpdates(this.options.params).catch(function (err) {\n        if (err.response && err.response.statusCode === ANOTHER_WEB_HOOK_USED) {\n          return _this4._unsetWebHook().then(function () {\n            return _this4.bot.getUpdates(_this4.options.params);\n          });\n        }\n        throw err;\n      });\n    }\n  }]);\n\n  return TelegramBotPolling;\n}();\n\nmodule.exports = TelegramBotPolling;"}